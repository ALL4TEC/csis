# frozen_string_literal: true

require 'test_helper'

class PentestReportsTest < ActionDispatch::IntegrationTest
  include Devise::Test::IntegrationHelpers

  def run
    Whois.stub(:whois, nil) do
      super
    end
  end

  test 'unauthenticated cannot create new pentest report' do
    project = projects(:project_one)
    get new_project_pentest_report_path(project)
    check_not_authenticated
    post project_pentest_reports_path(project)
    check_not_authenticated
  end

  test 'unauthenticated cannot consult pentest report' do
    report = pentest_reports(:hospiville)
    get pentest_report_path(report)
    check_not_authenticated
  end

  test 'unauthenticated cannot consult non-existent pentest report' do
    get pentest_report_path('ABC')
    check_not_authenticated
  end

  test 'unauthenticated cannot edit pentest report' do
    report = pentest_reports(:hospiville)
    get edit_pentest_report_path(report)
    check_not_authenticated
    put pentest_report_path(report)
    check_not_authenticated
    patch pentest_report_path(report)
    check_not_authenticated
  end

  test 'unauthenticated cannot edit non-existent pentest report' do
    report_id = 'ABC'
    get edit_pentest_report_path(report_id)
    check_not_authenticated
    put pentest_report_path(report_id)
    check_not_authenticated
    patch pentest_report_path(report_id)
    check_not_authenticated
  end

  test 'authenticated staff can consult pentest report' do
    sign_in users(:staffuser)
    report = pentest_reports(:hospiville)
    get pentest_report_path(report)
    assert_response :success
  end

  test 'authenticated staff cannot consult non-existent pentest report' do
    sign_in users(:staffuser)
    get pentest_report_path('ABC')
    assert_redirected_to projects_path
  end

  test 'authenticated staff can view new pentest report form' do
    sign_in users(:staffuser)
    project = projects(:project_one)
    get new_project_pentest_report_path(project)
    assert_response :success
  end

  test 'authenticated staff can create new pentest report' do
    sign_in users(:staffuser)
    report = pentest_reports(:hospiville)
    title = 'New Report'
    post project_pentest_reports_path(report.project), params:
    {
      pentest_report:
      {
        title: title,
        edited_at: '2230-06-05',
        contact_ids: [User.contacts.first.id],
        tools: 'test',
        exec_cond: 'test',
        purpose: 'test',
        results: 'test'
      }
    }
    new_report = PentestReport.find_by(title: title)
    assert_redirected_to new_report
  end

  test 'authenticated staff can create new pentest report with tops' do
    sign_in users(:staffuser)
    report = pentest_reports(:hospiville)
    title = 'New Report'
    post project_pentest_reports_path(report.project), params:
    {
      pentest_report:
      {
        title: title,
        edited_at: '2230-06-05',
        contact_ids: [User.contacts.first.id],
        tools: 'test',
        exec_cond: 'test',
        purpose: 'test',
        results: 'test',
        top_ids: Top.ids
      }
    }
    new_report = PentestReport.find_by(title: title)
    assert_redirected_to new_report
  end

  test 'authenticated staff can display edit form for pentest report' do
    sign_in users(:staffuser)
    report = pentest_reports(:hospiville)
    get edit_scan_report_path(report)
    assert_response :success
  end

  test 'authenticated staff cannot display edit form for non-existent pentest report' do
    sign_in users(:staffuser)
    get edit_pentest_report_path('ABC')
    assert_redirected_to projects_path
  end

  test 'authenticated staff can update pentest report' do
    sign_in users(:staffuser)
    report = pentest_reports(:hospiville)
    payload = {
      title: 'Joli Scan',
      edited_at: Date.new,
      vm_scan_ids: [VmScan.first.id],
      contact_ids: [User.contacts.first.id]
    }
    put pentest_report_path(report), params:
    {
      pentest_report: payload
    }
    updated = PentestReport.find(report.id)
    assert_equal payload[:title], updated.title
    assert_equal payload[:edited_at], updated.edited_at
    assert_equal payload[:vm_scan_ids], updated.vm_scans.ids
  end

  test 'authenticated staff cannot update pentest report without title' do
    sign_in users(:staffuser)
    report = pentest_reports(:hospiville)
    put pentest_report_path(report), params:
    {
      pentest_report:
      {
        title: nil
      }
    }
    updated = Report.find(report.id)
    assert_equal report.title, updated.title
  end

  test 'authenticated staff cannot update report pentest without contact' do
    sign_in users(:staffuser)
    report = pentest_reports(:hospiville)
    put pentest_report_path(report), params:
    {
      pentest_report:
      {
        contact_ids: []
      }
    }
    updated = PentestReport.find(report.id)
    assert_equal report.contacts.ids, updated.contacts.ids
  end

  test 'authenticated staff cannot update report pentest with more than 5 contact' do
    sign_in users(:staffuser)
    report = pentest_reports(:hospiville)
    put pentest_report_path(report), params:
    {
      pentest_report:
      {
        contact_ids: User.contacts.all.ids
      }
    }
    updated = PentestReport.find(report.id)
    assert_equal report.contacts.ids, updated.contacts.ids
  end

  test 'authenticated staff cannot update non-existent pentest report' do
    sign_in users(:staffuser)
    put pentest_report_path('ABC'), params: {
      pentest_report: {}
    }
    assert_redirected_to projects_path
  end
end
