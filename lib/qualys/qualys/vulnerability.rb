# frozen_string_literal: true

class Qualys::Vulnerability
  include Common::Xml

  VULN = './/VULN'
  KB_VULN = 'knowledge_base/vuln/'

  attr_reader :qid,
    :cve_id,
    :title,
    :category,
    :bugtraqs,
    :severity,
    :solution,
    :solution_fr,
    :modified,
    :published,
    :diagnosis,
    :diagnosis_fr,
    :vuln_type,
    :patchable,
    :consequence,
    :pci_flag,
    :remote,
    :additional_info,
    :exploit_srcs

  def initialize(data)
    @qid = get_text(data, './/QID')
    @vuln_type = get_text(data, './/VULN_TYPE')
    @severity = get_text(data, './/SEVERITY_LEVEL')
    @title = get_text(data, './/TITLE')
    @category = get_text(data, './/CATEGORY')
    @patchable = get_text(data, './/PATCHABLE')
    @diagnosis = get_text(data, './/DIAGNOSIS')
    @consequence = get_text(data, './/CONSEQUENCE')
    @solution = get_text(data, './/SOLUTION')
    @pci_flag = get_text(data, './/PCI_FLAG')
    @modified = Time.zone.parse(get_text(data, './/LAST_SERVICE_MODIFICATION_DATETIME'))
    @published = Time.zone.parse(get_text(data, './/PUBLISHED_DATETIME'))
    discoveries = get_xpath(data, './/DISCOVERY')
    unless discoveries.nil?
      @additional_info = get_text(discoveries, './/ADDITIONAL_INFO')
      @remote = get_text(discoveries, './/REMOTE')
    end
    @bugtraqs = []
    bugtraq_list = get_xpath(data, './/BUGTRAQ_LIST')
    get_xpath(bugtraq_list, './/BUGTRAQ')&.each do |bug|
      id = get_text(bug, './/ID')
      @bugtraqs << id
    end
    @cve_id = []
    cve_list = get_xpath(data, './/CVE_LIST')
    get_xpath(cve_list, './/CVE')&.each do |cv|
      id = get_text(cv, './/ID')
      @cve_id << id
    end
    @exploit_srcs = []
    correlation = get_xpath(data, './/CORRELATION')
    correlation = get_xpath(correlation, './/EXPLOITS')
    @exploit_srcs << Qualys::ExploitSource.new(get_xpath(correlation, './/EXPLT_SRC'))
  end

  def self.list(account, id_min, id_max)
    Qualys::Request.do_list(
      account,
      self,
      VULN,
      KB_VULN,
      action: 'list',
      id_min: id_min,
      id_max: id_max
    )
  end

  def self.list_modified_since(account, last_modification)
    Qualys::Request.do_list(
      account,
      self,
      VULN,
      KB_VULN,
      action: 'list',
      last_modified_after: last_modification
    )
  end

  def self.get(account, vulnerability_qid)
    Qualys::Request.do_singular(
      account,
      self,
      VULN,
      "#{KB_VULN}?action=list&ids=#{vulnerability_qid}"
    )
  end
end
