# frozen_string_literal: true

# Store vulnerability imports infos:
class VulnerabilityImport < Import
  before_destroy :abort_if_used_vuln

  has_many :vulnerabilities,
    class_name: 'Vulnerability',
    inverse_of: :vulnerability_import,
    primary_key: :id,
    foreign_key: :import_id,
    dependent: :destroy

  belongs_to :account,
    class_name: 'Account',
    inverse_of: :vulnerabilities_imports,
    optional: true

  has_one_attached :document

  enum_with_select :import_type, { cve: 0, qualys: 1, cyberwatch: 2 }, suffix: true
  enum_with_select :import_type_without_account, { cve: 0 }

  validates :document, presence: true, if: -> { account.blank? }

  scope :without_account, -> { where(account: :nil) }
  scope :with_account, -> { where.not(account: nil) }

  def abort_if_used_vuln
    :abort if used_vulns?
  end

  def used_vulns?
    vulnerabilities.any? do |vuln|
      vuln.wa_occurrences.count.positive? || vuln.vm_occurrences.count.positive?
    end
  end
end
