# frozen_string_literal: true

# = Vulnerability
#
# Le modèle +Vulnerability+ correspond à une vulnerabilité et toutes ses informations données par
# l'API Qualys.
#
# Une vulnerabilité définit une faille détectée.
# Une vulnerabilité est déterminée par son qid, son titre (title), une catégorie, une date de
# dernière modification et une date de publication.
#
# Une vulnerabilité est liée à plusieurs +Exploit+
# Une vulnerabilité est liée à plusieurs +VmOccurrence+ et +WaOccurrence+ qui représentent les
# résultats de scans concernant cette vulnérabilité
class Vulnerability < ApplicationRecord
  include EnumSelect
  has_paper_trail

  belongs_to :vulnerability_import,
    class_name: 'VulnerabilityImport',
    primary_key: :id,
    foreign_key: :import_id,
    inverse_of: :vulnerabilities,
    optional: true

  has_many :exploit_vulnerabilities,
    class_name: 'ExploitVulnerability',
    inverse_of: :vulnerability,
    dependent: :delete_all

  has_many :exploits,
    class_name: 'Exploit',
    inverse_of: :vulnerabilities,
    foreign_key: :exploit_id,
    through: :exploit_vulnerabilities

  has_many :vm_occurrences,
    class_name: 'VmOccurrence',
    inverse_of: :vulnerability,
    primary_key: :id,
    dependent: :delete_all

  has_many :wa_occurrences,
    class_name: 'WaOccurrence',
    inverse_of: :vulnerability,
    primary_key: :id,
    dependent: :delete_all

  enum_with_select :kb_type, {
    qualys: 'qualys', burp: 'burp', cve: 'cve', zaproxy: 'zaproxy', nessus: 'nessus',
    cyberwatch: 'cyberwatch', with_secure: 'with_secure'
  }, suffix: true

  enum_with_select :kind, { information_gathered: 0, vulnerability: 1, potential_vulnerability: 2,
                            vulnerability_or_potential_vulnerability: 3 }

  ORDERED_KINDS = %w[
    vulnerability
    potential_vulnerability
    vulnerability_or_potential_vulnerability
    information_gathered
  ].freeze

  enum_with_select :severity, { trivial: 0, low: 1, medium: 2, high: 3, critical: 4 }, suffix: true

  attr_readonly :qid
  validates :qid, presence: true, uniqueness: { scope: :kb_type }
  validates :title, presence: true
  validates :category, presence: true
  validates :modified, presence: true
  validates :published, presence: true

  default_scope { order(:qid) }

  def to_s
    title
  end

  class << self
    # Filter vulnerabilities function of passed opts
    # @param opts: {kind: Vulnerability.kind} or {severity: Vulnerability.severity}
    def filter_opts(vulns, opts, opt)
      vulns.select { |v| v.send(opt).to_s == opts[opt].to_s }
    end

    def ransackable_attributes(_auth_object = nil)
      %w[additional_info bugtraqs category consequence created_at cve_id cvss cvss_vector
         cvss_version diagnosis exploitability_score id impact_score import_id internal_type
         kb_type kind modified osvdb patchable pci_flag published qid remote severity solution
         title updated_at]
    end
  end
end
