# frozen_string_literal: true

class PentestReportsController < ReportsController
  # Ne pas mettre set_report sinon override celui de la superclasse
  # et change l'ordre d'exÃ©cution ...
  before_action :pentest_enabled
  before_action :set_pentest_report, only: %i[new_vulnerability_scan new_appendix]
  before_action :set_aggregate_section_header, only: %i[new_vulnerability_scan new_appendix]

  # <tt>GET /pentest_reports/:report_id/new_vulnerability_scan/tt>
  def new_vulnerability_scan
    aggregate_breadcrumb(@report)
    add_breadcrumb t(AGGREGATES_ACTIONS_CREATE)
    @aggregate = Aggregate.new(kind: :vulnerability_scan)
    @contents = []
    render 'aggregates/new'
  end

  # <tt>GET /pentest_reports/:report_id/new_appendix</tt>
  def new_appendix
    aggregate_breadcrumb(@report)
    add_breadcrumb t(AGGREGATES_ACTIONS_CREATE)
    @aggregate = Aggregate.new(kind: :appendix)
    @contents = []
    render 'aggregates/new'
  end

  private

  def set_pentest_report
    set_report
  end

  def pentest_enabled
    Rails.application.config.pentest_enabled
  end

  def aggregate_breadcrumb(report)
    add_home_to_breadcrumb
    add_breadcrumb t('projects.section_title'), :projects_url
    add_breadcrumb report.project.name, project_path(report.project_id)
    add_breadcrumb t('models.reports'), project_reports_path(report.project_id)
    add_breadcrumb report.title, report
  end

  def set_aggregate_section_header
    clazz = @report.type
    reports_headers = "#{clazz}sHeaders".constantize.new
    @app_section = make_section_header(
      title: report_title(@report),
      subtitle: report_subtitle(@report),
      actions: [reports_headers.action(:back, report_aggregates_path(@report))]
    )
  end

  def report_title(report)
    t('reports.pages.title', report: report.title, date: report.edited_at.strftime('%d/%m/%y'))
  end

  def report_subtitle(report)
    t('reports.pages.project', project: report.project, client: report.project.client)
  end

  # Takes care of param[:tools]
  # No need for a new table, a text field does the trick
  def handle_tools
    tools = params[:tools].present? ? params[:tools].values.to_json : nil
    @report.update(tools: tools)
  end
end
